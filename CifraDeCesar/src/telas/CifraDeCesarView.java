/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Alisson Jaques
 */
public class CifraDeCesarView extends javax.swing.JFrame {

    private Criptografar telaCriptografar;
    private Descriptografar telaDescriptografar;

    /**
     * Creates new form CifraDeCesar
     */
    public CifraDeCesarView() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src\\img\\digitacao.png"));
        initComponents();
        String lookAndFeelClassName = UIManager.getSystemLookAndFeelClassName();
        try {
            UIManager.setLookAndFeel(lookAndFeelClassName);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(CifraDeCesarView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdpPrincipal = new javax.swing.JDesktopPane();
        jlImagem = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmCriptografia = new javax.swing.JMenu();
        jmiCriptografar = new javax.swing.JMenuItem();
        jmiDescriptografar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Criptografia de Mensagens");

        jlImagem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cifraDeCesar.jpg"))); // NOI18N

        jdpPrincipal.setLayer(jlImagem, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jdpPrincipalLayout = new javax.swing.GroupLayout(jdpPrincipal);
        jdpPrincipal.setLayout(jdpPrincipalLayout);
        jdpPrincipalLayout.setHorizontalGroup(
            jdpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdpPrincipalLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jlImagem)
                .addContainerGap(193, Short.MAX_VALUE))
        );
        jdpPrincipalLayout.setVerticalGroup(
            jdpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jdpPrincipalLayout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addComponent(jlImagem)
                .addGap(90, 90, 90))
        );

        jMenuBar1.setBackground(new java.awt.Color(28, 28, 28));

        jmCriptografia.setForeground(new java.awt.Color(255, 255, 255));
        jmCriptografia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/password32.png"))); // NOI18N
        jmCriptografia.setText("Criptografia");
        jmCriptografia.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jmiCriptografar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiCriptografar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jmiCriptografar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/imgBloquearNoticia.png"))); // NOI18N
        jmiCriptografar.setText("Criptografar");
        jmiCriptografar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCriptografarActionPerformed(evt);
            }
        });
        jmCriptografia.add(jmiCriptografar);

        jmiDescriptografar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiDescriptografar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jmiDescriptografar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/imgDesbloquearNoticia.png"))); // NOI18N
        jmiDescriptografar.setText("Descriptografar");
        jmiDescriptografar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDescriptografarActionPerformed(evt);
            }
        });
        jmCriptografia.add(jmiDescriptografar);

        jMenuBar1.add(jmCriptografia);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jdpPrincipal)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jdpPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jmiCriptografarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCriptografarActionPerformed
        if (getTelaCriptografar() == null) {
            setTelaCriptografar(new Criptografar());
            getJdpPrincipal().add(getTelaCriptografar());
            getTelaCriptografar().setVisible(true);
            centralizarJInternalFrame(getTelaCriptografar());
        } else if (getTelaCriptografar() != null) {
            if (getTelaCriptografar().isClosed()) {
                setTelaCriptografar(new Criptografar());
                getJdpPrincipal().add(getTelaCriptografar());
                getTelaCriptografar().setVisible(true);
                centralizarJInternalFrame(getTelaCriptografar());
            }
        }
    }//GEN-LAST:event_jmiCriptografarActionPerformed

    private void jmiDescriptografarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDescriptografarActionPerformed
         if (getTelaDescriptografar() == null) {
            setTelaDescriptografar(new Descriptografar());
            getJdpPrincipal().add(getTelaDescriptografar());
            getTelaDescriptografar().setVisible(true);
            centralizarJInternalFrame(getTelaDescriptografar());
        } else if (getTelaDescriptografar() != null) {
            if (getTelaDescriptografar().isClosed()) {
                setTelaDescriptografar(new Descriptografar());
                getJdpPrincipal().add(getTelaDescriptografar());
                getTelaDescriptografar().setVisible(true);
                centralizarJInternalFrame(getTelaDescriptografar());
            }
        }
    }//GEN-LAST:event_jmiDescriptografarActionPerformed

    /**
     * O método centralizarJInternalFrame(JInternalFrame) centraliza o frame
     * passado como argumento na tela da aplicação.
     *
     * @param frame uma intância da classe JInternalFrame a ser centralizada na
     * aplicação.
     */
    private void centralizarJInternalFrame(JInternalFrame frame) {

        int lDesk = getJdpPrincipal().getWidth();
        int aDesk = getJdpPrincipal().getHeight();

        int lFrame = frame.getWidth();
        int aFrame = frame.getHeight();

        frame.setLocation(lDesk / 2 - lFrame / 2, aDesk / 2 - aFrame / 2);
    }

    /**
     * @return the telaCriptografar
     */
    public Criptografar getTelaCriptografar() {
        return telaCriptografar;
    }

    /**
     * @param telaCriptografar the telaCriptografar to set
     */
    public void setTelaCriptografar(Criptografar telaCriptografar) {
        this.telaCriptografar = telaCriptografar;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JDesktopPane jdpPrincipal;
    private javax.swing.JLabel jlImagem;
    private javax.swing.JMenu jmCriptografia;
    private javax.swing.JMenuItem jmiCriptografar;
    private javax.swing.JMenuItem jmiDescriptografar;
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * @return the telaDescriptografar
     */
    public Descriptografar getTelaDescriptografar() {
        return telaDescriptografar;
    }

    /**
     * @param telaDescriptografar the telaDescriptografar to set
     */
    public void setTelaDescriptografar(Descriptografar telaDescriptografar) {
        this.telaDescriptografar = telaDescriptografar;
    }
    
    /**
     * @return the jMenuBar1
     */
    public javax.swing.JMenuBar getjMenuBar1() {
        return jMenuBar1;
    }

    /**
     * @param jMenuBar1 the jMenuBar1 to set
     */
    public void setjMenuBar1(javax.swing.JMenuBar jMenuBar1) {
        this.jMenuBar1 = jMenuBar1;
    }

    /**
     * @return the jdpPrincipal
     */
    public javax.swing.JDesktopPane getJdpPrincipal() {
        return jdpPrincipal;
    }

    /**
     * @param jdpPrincipal the jdpPrincipal to set
     */
    public void setJdpPrincipal(javax.swing.JDesktopPane jdpPrincipal) {
        this.jdpPrincipal = jdpPrincipal;
    }

    /**
     * @return the jlImagem
     */
    public javax.swing.JLabel getJlImagem() {
        return jlImagem;
    }

    /**
     * @param jlImagem the jlImagem to set
     */
    public void setJlImagem(javax.swing.JLabel jlImagem) {
        this.jlImagem = jlImagem;
    }

    /**
     * @return the jmCriptografia
     */
    public javax.swing.JMenu getJmCriptografia() {
        return jmCriptografia;
    }

    /**
     * @param jmCriptografia the jmCriptografia to set
     */
    public void setJmCriptografia(javax.swing.JMenu jmCriptografia) {
        this.jmCriptografia = jmCriptografia;
    }

    /**
     * @return the jmiCriptografar
     */
    public javax.swing.JMenuItem getJmiCriptografar() {
        return jmiCriptografar;
    }

    /**
     * @param jmiCriptografar the jmiCriptografar to set
     */
    public void setJmiCriptografar(javax.swing.JMenuItem jmiCriptografar) {
        this.jmiCriptografar = jmiCriptografar;
    }

    /**
     * @return the jmiDescriptografar
     */
    public javax.swing.JMenuItem getJmiDescriptografar() {
        return jmiDescriptografar;
    }

    /**
     * @param jmiDescriptografar the jmiDescriptografar to set
     */
    public void setJmiDescriptografar(javax.swing.JMenuItem jmiDescriptografar) {
        this.jmiDescriptografar = jmiDescriptografar;
    }
}
